{"version":3,"sources":["components/ListComponent.tsx","utils/use-debounce.ts","components/ViewComponent.tsx","App.tsx","reportWebVitals.ts","serviceWorker.ts","index.tsx"],"names":["LIST_CATEGORIES","gql","LIST_FACTS","Component","location","useLocation","history","useHistory","query","useMemo","qs","parse","search","ignoreQueryPrefix","categoryData","useQuery","data","useState","categories","setCategories","setSearch","debouncedSearch","value","delay","React","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","useDebounce","whereStatement","statement","_q","length","_where","id_in","variables","where","loading","queryCategories","toString","split","_","isEmpty","toggleCategory","useCallback","category","idx","indexOf","id","arr","splice","push","join","bg","pt","pb","borderBottomWidth","borderColor","shadow","maxW","spacing","href","isExternal","src","w","alt","textAlign","fontSize","size","pointerEvents","children","as","FaSearch","color","placeholder","onChange","e","target","mb","map","selected","mr","cursor","_hover","onClick","FaTag","name","py","columns","base","md","lg","facts","fact","display","p","borderWidth","rounded","alignItems","noOfLines","text","research","colorScheme","variant","GET_FACT","useParams","leftIcon","fontWeight","mt","item","url","title","aria-label","icon","App","theme","path","exact","ListComponent","ViewComponent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","hostname","match","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f2f134e4.chunk.js","sourcesContent":["import React, { useCallback, useEffect } from \"react\";\nimport {\n  Box,\n  Center,\n  Container,\n  HStack,\n  Link,\n  LinkBox,\n  LinkOverlay,\n  SimpleGrid,\n  Spacer,\n  Text,\n  VStack,\n} from \"@chakra-ui/layout\";\nimport { Tag, TagLabel, TagLeftIcon } from \"@chakra-ui/tag\";\nimport { useMemo, useState } from \"react\";\nimport { useHistory, useLocation } from \"react-router\";\nimport { FactModel } from \"../models/FactModel\";\nimport { CategoryModel } from \"../models/CategoryModel\";\nimport qs from \"qs\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport { FaSearch, FaTag } from \"react-icons/fa\";\nimport _ from \"lodash\";\nimport { Input, InputGroup, InputLeftElement } from \"@chakra-ui/input\";\nimport Icon from \"@chakra-ui/icon\";\nimport { Image } from \"@chakra-ui/image\";\nimport { useDebounce } from \"../utils\";\n\nconst LIST_CATEGORIES = gql`\n  query ListCategories {\n    categories: factCategories {\n      id\n      name\n    }\n  }\n`;\n\nconst LIST_FACTS = gql`\n  query ListFacts($where: JSON) {\n    facts(where: $where) {\n      id\n      text\n      categories {\n        id\n        name\n      }\n      research {\n        id\n      }\n    }\n  }\n`;\n\nconst Component = () => {\n  const location = useLocation();\n  const history = useHistory();\n  const query: any = useMemo(\n    () => qs.parse(location.search, { ignoreQueryPrefix: true }),\n    [location]\n  );\n  const { data: categoryData } = useQuery(LIST_CATEGORIES);\n  const [categories, setCategories] = useState<string[]>([]);\n  const [search, setSearch] = useState<string | undefined>();\n  const debouncedSearch = useDebounce(search, 300);\n  const whereStatement = useMemo(() => {\n    const statement: any = {};\n\n    if (debouncedSearch) {\n      statement._q = debouncedSearch;\n    }\n\n    if (categories.length > 0) {\n      statement._where = {\n        categories: {\n          id_in: categories,\n        },\n      };\n    }\n\n    return statement;\n  }, [categories, debouncedSearch]);\n  const { loading, data } = useQuery(LIST_FACTS, {\n    variables: {\n      where: whereStatement,\n    },\n  });\n\n  useEffect(() => {\n    const queryCategories = query?.categories?.toString().split(\",\");\n    if (!_.isEmpty(query?.categories)) {\n      setCategories(queryCategories);\n    }\n  }, [query?.categories]);\n\n  const toggleCategory = useCallback(\n    (category: CategoryModel) => {\n      const idx = categories.indexOf(category.id.toString());\n      const arr = [...categories];\n      if (idx !== -1) {\n        arr.splice(idx, 1);\n        setCategories(arr);\n      } else {\n        arr.push(category.id);\n        setCategories(arr);\n      }\n\n      history.push(`/?categories=${arr.join(\",\")}`);\n    },\n    [categories, history]\n  );\n\n  return (\n    <>\n      <Box\n        bg=\"gray.100\"\n        pt={24}\n        pb={10}\n        borderBottomWidth={1}\n        borderColor=\"gray.200\"\n        shadow=\"sm\"\n      >\n        <Container maxW=\"5xl\">\n          <VStack spacing={4}>\n            <Link href=\"https://aquaponicsassociation.org/\" isExternal>\n              <Image\n                src=\"/assets/images/logo.png\"\n                w={40}\n                alt=\"The Aquaponics Association\"\n              />\n            </Link>\n            <Text maxW=\"xl\" textAlign=\"center\" fontSize=\"lg\">\n              Welcome to the verified factsheet of Aquaponic benefits! Below\n              you'll find up-to-date and important facts regarding the benefits\n              of Aquaponics and the research associated with these findings.\n            </Text>\n            <InputGroup size=\"lg\" bg=\"white\">\n              <InputLeftElement\n                pointerEvents=\"none\"\n                children={<Icon as={FaSearch} color=\"gray.300\" />}\n              />\n              <Input\n                placeholder=\"Search facts...\"\n                onChange={(e: any) => setSearch(e.target.value)}\n              />\n            </InputGroup>\n            <Box mb={10}>\n              {categoryData &&\n                categoryData.categories.map((category: CategoryModel) => {\n                  const selected = categories.indexOf(category.id) !== -1;\n                  return (\n                    <Tag\n                      size=\"lg\"\n                      mr={2}\n                      key={category.id}\n                      cursor=\"pointer\"\n                      _hover={\n                        selected ? { bg: \"green.500\" } : { bg: \"gray.200\" }\n                      }\n                      onClick={() => toggleCategory(category)}\n                      bg={selected ? \"green.400\" : \"gray.100\"}\n                      color={selected ? \"white\" : \"gray.700\"}\n                    >\n                      <TagLeftIcon as={FaTag} />\n                      <TagLabel>{category.name}</TagLabel>\n                    </Tag>\n                  );\n                })}\n            </Box>\n          </VStack>\n        </Container>\n      </Box>\n\n      <Container maxW=\"5xl\">\n        <Box py={10}>\n          {loading && (\n            <Center py={4}>\n              <Spinner color=\"gray.300\" size=\"xl\" />\n            </Center>\n          )}\n          {!loading && (\n            <SimpleGrid spacing={4} columns={{ base: 1, md: 2, lg: 3 }}>\n              {data?.facts?.map((fact: FactModel) => (\n                <LinkBox\n                  display=\"flex\"\n                  key={fact.id}\n                  as=\"article\"\n                  p={5}\n                  borderWidth={1}\n                  rounded=\"md\"\n                  _hover={{\n                    shadow: \"md\",\n                  }}\n                >\n                  <VStack alignItems=\"start\">\n                    <Text color=\"gray.400\">#{fact.id}</Text>\n                    <LinkOverlay href={`/fact/${fact.id}`}>\n                      <Text noOfLines={3} as=\"h3\" fontSize=\"lg\">\n                        {fact.text}\n                      </Text>\n                    </LinkOverlay>\n                    <Spacer />\n                    <HStack>\n                      {fact?.research && fact.research.length > 0 && (\n                        <Tag colorScheme=\"blue\" variant=\"outline\">\n                          Citations {fact.research.length}\n                        </Tag>\n                      )}\n                      {fact?.categories && fact.categories.length > 0 && (\n                        <Tag colorScheme=\"gray\" variant=\"outline\">\n                          Categories {fact.categories.length}\n                        </Tag>\n                      )}\n                    </HStack>\n                  </VStack>\n                </LinkBox>\n              ))}\n            </SimpleGrid>\n          )}\n        </Box>\n      </Container>\n    </>\n  );\n};\n\nexport default Component;\n","import React, { useEffect } from \"react\";\n\n/**\n * Allowing debounce of a particular input or action\n * using React Hooks\n *\n * @param {string} value The value of the input strnig\n * @param {number} delay The debounce interval\n * @return {string} The final value\n */\nexport default function useDebounce(\n  value: string | undefined,\n  delay: number\n): string | undefined {\n  const [debouncedValue, setDebouncedValue] = React.useState<\n    string | undefined\n  >(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => setDebouncedValue(value), delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n","import React from \"react\";\nimport {\n  Box,\n  Center,\n  Container,\n  Heading,\n  HStack,\n  Link,\n  Spacer,\n  VStack,\n} from \"@chakra-ui/layout\";\nimport { Tag, TagLabel, TagLeftIcon } from \"@chakra-ui/tag\";\nimport { useHistory, useParams } from \"react-router\";\nimport { CategoryModel } from \"../models/CategoryModel\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport { FaChevronLeft, FaLink, FaTag } from \"react-icons/fa\";\nimport { Image } from \"@chakra-ui/image\";\nimport { Button, IconButton } from \"@chakra-ui/button\";\nimport { ResearchModel } from \"../models/ResearchModel\";\n\nconst GET_FACT = gql`\n  query GetFact($id: ID!) {\n    fact(id: $id) {\n      id\n      text\n      updated_at\n      categories {\n        id\n        name\n      }\n      research {\n        id\n        title\n        url\n        description\n        citation\n        updated_at\n      }\n    }\n  }\n`;\n\nconst Component = () => {\n  const history = useHistory();\n  const { id } = useParams<{ id: string }>();\n  const { loading, data } = useQuery(GET_FACT, {\n    variables: {\n      id,\n    },\n  });\n\n  return (\n    <>\n      <Box\n        bg=\"gray.100\"\n        pt={24}\n        pb={10}\n        mb={6}\n        borderBottomWidth={1}\n        borderColor=\"gray.200\"\n        shadow=\"sm\"\n      >\n        <Container maxW=\"5xl\">\n          <VStack spacing={4}>\n            <Link href=\"https://aquaponicsassociation.org/\" isExternal>\n              <Image\n                src=\"/assets/images/logo.png\"\n                w={40}\n                alt=\"The Aquaponics Association\"\n              />\n            </Link>\n          </VStack>\n        </Container>\n      </Box>\n\n      <Container maxW=\"5xl\">\n        <Button\n          onClick={() => history.push(\"/\")}\n          leftIcon={<FaChevronLeft />}\n          variant=\"outline\"\n          size=\"lg\"\n        >\n          Back to Facts\n        </Button>\n        <Box py={4}>\n          {loading && (\n            <Center py={4}>\n              <Spinner color=\"gray.300\" size=\"xl\" />\n            </Center>\n          )}\n          {!loading && (\n            <VStack as=\"article\" alignItems=\"start\">\n              <Box w=\"full\" borderWidth={1} rounded=\"lg\" p={10}>\n                <Heading\n                  textAlign=\"center\"\n                  as=\"h1\"\n                  size=\"lg\"\n                  fontWeight=\"normal\"\n                >\n                  {data.fact.text}\n                </Heading>\n                {data.fact?.categories && data.fact.categories.length > 0 && (\n                  <Box textAlign=\"center\" mt={10}>\n                    {data.fact.categories.map((category: CategoryModel) => {\n                      return (\n                        <Tag\n                          size=\"md\"\n                          mr={2}\n                          key={category.id}\n                          cursor=\"pointer\"\n                          _hover={{ bg: \"gray.200\" }}\n                          bg=\"gray.100\"\n                          color=\"gray.700\"\n                          onClick={() =>\n                            history.push(`/?categories=${category.id}`)\n                          }\n                        >\n                          <TagLeftIcon as={FaTag} />\n                          <TagLabel>{category.name}</TagLabel>\n                        </Tag>\n                      );\n                    })}\n                  </Box>\n                )}\n              </Box>\n              <Spacer pt={10} />\n              {data.fact?.research && data.fact.research.length > 0 && (\n                <VStack alignItems=\"start\" w=\"full\">\n                  <Heading size=\"lg\" as=\"h2\">\n                    Research\n                  </Heading>\n                  {data.fact.research.map((item: ResearchModel) => (\n                    <HStack\n                      borderWidth={1}\n                      borderColor=\"gray.100\"\n                      p={2}\n                      rounded=\"md\"\n                      w=\"full\"\n                    >\n                      <Heading\n                        as=\"h3\"\n                        noOfLines={1}\n                        fontWeight=\"light\"\n                        size=\"md\"\n                      >\n                        <Link href={item.url} isExternal>\n                          {item.title}\n                        </Link>\n                      </Heading>\n                      <Spacer />\n                      {item.url && (\n                        <Link href={item.url} isExternal>\n                          <IconButton\n                            aria-label=\"website\"\n                            icon={<FaLink />}\n                            variant=\"ghost\"\n                          />\n                        </Link>\n                      )}\n                    </HStack>\n                  ))}\n                </VStack>\n              )}\n            </VStack>\n          )}\n        </Box>\n      </Container>\n    </>\n  );\n};\n\nexport default Component;\n","import * as React from 'react';\nimport { ChakraProvider, theme } from '@chakra-ui/react';\nimport ListComponent from './components/ListComponent';\nimport { Switch, Route, BrowserRouter as Router } from 'react-router-dom';\nimport ViewComponent from './components/ViewComponent';\n\nexport const App = () => (\n  <ChakraProvider theme={theme}>\n    <Router>\n      <Switch>\n        <Route path='/' exact>\n          <ListComponent />\n        </Route>\n        <Route path='/fact/:id'>\n          <ViewComponent />\n        </Route>\n      </Switch>\n    </Router>\n  </ChakraProvider>\n);\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\n\nconst client = new ApolloClient({\n  uri: \"https://api.aquaponicsassociation.org/graphql\",\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}